def floyd_algorithm(graph, n):
    # Initialize the distance matrix with the given graph
    dist = [[float('inf')] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0  # Distance from a vertex to itself is 0
        for j in range(n):
            if graph[i][j] != 0:
                dist[i][j] = graph[i][j]

    # Apply Floyd's algorithm to update the distance matrix
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

def main():
    n = int(input("Enter the number of vertices in the graph: "))
    graph = []
    print("Enter the adjacency matrix of the graph (enter 0 for no edge):")
    for _ in range(n):
        row = list(map(int, input().split()))
        graph.append(row)

    shortest_paths = floyd_algorithm(graph, n)

    print("\nShortest distances between vertices:")
    for i in range(n):
        for j in range(n):
            print(f"Shortest distance from {i} to {j}: {shortest_paths[i][j]}")

if __name__ == "__main__":
    main()
